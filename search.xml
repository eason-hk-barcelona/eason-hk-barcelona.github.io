<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>logistics</title>
      <link href="/2023/05/04/2023-5-4-logistics/"/>
      <url>/2023/05/04/2023-5-4-logistics/</url>
      
        <content type="html"><![CDATA[<h2 id="x3D-x3D-二元分类-x3D-x3D"><a href="#x3D-x3D-二元分类-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;二元分类&#x3D;&#x3D;"></a>&#x3D;&#x3D;二元分类&#x3D;&#x3D;</h2><p>输出：标签1&#x2F;0</p><p>img在计算机中保存–&gt;三个矩阵（假设64*64，那么就有3 * 64 * 64个像素，变成特征向量，总维度，也就是矩阵的行为n&#x3D;3 * 64 * 64，如果有m组训练集，那么矩阵最终为m列，n行)</p><p><img src="/../img/%E4%B8%89%E4%B8%AA%E7%9F%A9%E9%98%B5.png" alt="三个矩阵"></p><h2 id="x3D-x3D-logistics回归-x3D-x3D"><a href="#x3D-x3D-logistics回归-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;logistics回归&#x3D;&#x3D;"></a>&#x3D;&#x3D;logistics回归&#x3D;&#x3D;</h2><p> y^ 表示 y 等于1的一种可能性或者是机会</p><p>w 表示逻辑回归的参数，这也是一个 n 维向量（因为 w 实际上是特征权重，维度与特征向量相同），参数里面还有 b，这是一个实数（表示偏差）</p><p>选择使用sigmoid函数原因：如果单纯线性，无法把y^值控制在0-1之间，故取sigmoid(z)</p><p>使得z很大，sigmoid(z)趋近1， z 变成一个绝对值很大的负数，sigmoid(z)趋近0</p><p><img src="/../img/sigmoid.png" alt="sigmoid"></p><h3 id="x3D-x3D-损失函数-x3D-x3D"><a href="#x3D-x3D-损失函数-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;损失函数&#x3D;&#x3D;"></a>&#x3D;&#x3D;损失函数&#x3D;&#x3D;</h3><p>$L(\hat{y},y) &#x3D; -y\log(\hat{y})-(1-y)\log(1-\hat{y})$    单次</p><p>成本（代价）函数：$J(w,b) &#x3D; \frac{1}{m}\sum_{i&#x3D;1}^{m}{(-y\log(\hat{y})-(1-y)\log(1-\hat{y}))}$ 也就是总代价，训练逻辑回归模型时候，我们需要找到合适的 w 和 b ，来让代价函数 J 的总代价降到最低</p><h2 id="x3D-x3D-梯度下降法-x3D-x3D"><a href="#x3D-x3D-梯度下降法-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;梯度下降法&#x3D;&#x3D;"></a>&#x3D;&#x3D;梯度下降法&#x3D;&#x3D;</h2><p>J 为凸函数，没有局部最优，只有全局最优</p><p><img src="/../img/bowl.png" alt="bowl"></p><p><strong>朝最陡的下坡方向走一步，不断地迭代</strong></p><p>更新w，b  找到最合适的参数使得J &#x3D; Jmin<br><img src="/../img/repeat%20procedure.png" alt="Alt text"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Intro to deep learning</title>
      <link href="/2023/05/03/2023-5-3-intro%20to%20Deep%20learning/"/>
      <url>/2023/05/03/2023-5-3-intro%20to%20Deep%20learning/</url>
      
        <content type="html"><![CDATA[<h2 id="x3D-x3D-Deep-learning-x3D-x3D"><a href="#x3D-x3D-Deep-learning-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;Deep learning&#x3D;&#x3D;"></a>&#x3D;&#x3D;Deep learning&#x3D;&#x3D;</h2><h3 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h3><p>RELU 修正线性单元</p><p>独立神经元叠在一起 –&gt; 神经网络 –&gt; 只需要input x –&gt; output y（中间部分自己完成）</p><p><img src="/../img/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.png" alt="image-20230503192115327"></p><p>supervised learning 监督学习       &#x3D;&#x3D;NN-&gt;neural net&#x3D;&#x3D;</p><ul><li><p>predict房价，ad投放   –&gt;  standard NN;</p></li><li><p>image  –&gt; CNN（卷积神经网络）</p></li><li><p>sequence data&#x3D;&#x3D;(eg. audio, language)&#x3D;&#x3D;  –&gt;  RNN （循环神经网络）</p></li><li><p>无人驾驶 –&gt; custom, hybrid(复杂)</p></li></ul><p> 结构化数据——对数据有很清晰的定义</p><p>非结构化数据——相对难解释给计算机</p><p><img src="/../img/%E7%BB%93%E6%9E%84&%E9%9D%9E%E7%BB%93%E6%9E%84.png" alt="image-20230503192013798"></p><p>要么神经网络规模大，要么数据量多</p><ul><li>data 早期</li><li>computation 当下 </li><li>algorithms 创新算法为了加快计算速度，服务于规模更大的网络</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>快排 &amp; 归并</title>
      <link href="/2023/04/28/2023-4-28-%E5%BF%AB%E6%8E%92&amp;%E5%BD%92%E5%B9%B6/"/>
      <url>/2023/04/28/2023-4-28-%E5%BF%AB%E6%8E%92&amp;%E5%BD%92%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="快速排序-gt-平均O-nlogn-gt-不稳定"><a href="#快速排序-gt-平均O-nlogn-gt-不稳定" class="headerlink" title="快速排序-&gt;平均O(nlogn)-&gt;不稳定"></a>快速排序-&gt;平均O(nlogn)-&gt;不稳定</h3><h4 id="x3D-x3D-基本思想-x3D-x3D"><a href="#x3D-x3D-基本思想-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;基本思想&#x3D;&#x3D;"></a>&#x3D;&#x3D;基本思想&#x3D;&#x3D;</h4><h5 id=""><a href="#" class="headerlink" title=""></a><img src="/../img/%E5%BF%AB%E6%8E%92.png" alt="快排"></h5><h5 id="分治——以上是暴力做法-复杂度为O-n"><a href="#分治——以上是暴力做法-复杂度为O-n" class="headerlink" title="分治——以上是暴力做法 复杂度为O(n)"></a>分治——以上是暴力做法 复杂度为O(n)</h5><h5 id="优美解法如上"><a href="#优美解法如上" class="headerlink" title="优美解法如上"></a><img src="/../img/%E5%BF%AB%E6%8E%92%E6%9A%B4%E5%8A%9B.png" alt="快排暴力">优美解法如上</h5><h4 id="归并排序-gt-O-nlogn-gt-稳定"><a href="#归并排序-gt-O-nlogn-gt-稳定" class="headerlink" title="归并排序-&gt;O(nlogn)-&gt;稳定"></a>归并排序-&gt;O(nlogn)-&gt;稳定</h4><p>&#x3D;&#x3D;基本思想&#x3D;&#x3D;——难点在归并<br><img src="/../img/%E5%BD%92%E5%B9%B6.png" alt="归并"><br>关于复杂度：n除2^logn次得到1，也就是有n层，每一层的复杂度为n，故总复杂度为nlogn</p><p><img src="/../img/%E5%BD%92%E5%B9%B6%E6%80%9D%E8%B7%AF.png" alt="归并思路"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kadane算法-动态规划</title>
      <link href="/2023/04/28/2023-4-28-Kadane%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2023/04/28/2023-4-28-Kadane%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>Kadane算法-&gt;动态规划</p><p>最大连续子数组和：函数名称是MaxSubArray(L); 初始条件是线性表L已存在且非空，请找出一个具有最大和的连续子数组（子数组最少包含一个元素），操作结果是其最大和；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> maxSum = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> curSum = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        curSum = curSum &gt; <span class="number">0</span> ? curSum + nums[i] : nums[i];</span><br><span class="line">        <span class="keyword">if</span> (curSum &gt; maxSum) &#123;</span><br><span class="line">            maxSum = curSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链表类似</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前段路径</title>
      <link href="/2023/04/28/2023-4-28-%E5%89%8D%E6%AE%B5%E8%B7%AF%E5%BE%84/"/>
      <url>/2023/04/28/2023-4-28-%E5%89%8D%E6%AE%B5%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="前端路径"><a href="#前端路径" class="headerlink" title="前端路径"></a>前端路径</h1><h3 id="三大件"><a href="#三大件" class="headerlink" title="三大件"></a>三大件</h3><ul><li><h4 id="html5，css"><a href="#html5，css" class="headerlink" title="html5，css"></a>html5，css</h4></li></ul><p>  ​这里推荐pink老师的前端入门教程：</p><p>  ​<a href="https://www.bilibili.com/video/BV14J4114768">https://www.bilibili.com/video/BV14J4114768</a></p><p>  ​可以先看到249集</p><ul><li><h4 id="JS、BOM、DOM"><a href="#JS、BOM、DOM" class="headerlink" title="JS、BOM、DOM"></a>JS、BOM、DOM</h4><p>黑马程序员pink老师JavaScript基础语法：</p><p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha">https://www.bilibili.com/video/BV1Sy4y1C7ha</a></p><p>可以先看到286集</p></li></ul><h3 id="学习平台"><a href="#学习平台" class="headerlink" title="学习平台"></a>学习平台</h3><p>  W3School：<a href="https://www.w3school.com.cn/">https://www.w3school.com.cn/</a></p><p>  MMDN：<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><p>  菜鸟教程：<a href="https://www.runoob.com/">https://www.runoob.com/</a></p><p>  当然还有：</p><p>  谷歌：<a href="https://www.google.com.hk/">https://www.google.com.hk/</a></p><h3 id="协同工具"><a href="#协同工具" class="headerlink" title="协同工具"></a>协同工具</h3><p>  ​git：</p><p>  ​<a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p><p>  ​github：</p><p>  ​<a href="https://github.com/">https://github.com/</a></p><p>  可以自己找一些项目做，主要多敲代码</p><p>  之后进阶可以学习react，vue框架</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/04/27/2023-4-27-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/04/27/2023-4-27-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2><p>yeah yeah yeah </p><p>要开始做博客了，大一上学期学姐就有推荐我尝试记录自己的成长历程</p><p>但无奈那时候太忙orz（懒是原罪）</p><p>这学期看了大物实验的blog觉得很帅</p><p>想自己尝试一下</p><p>希望先做个小demo出来</p><p>后续会不断完善滴！！！</p><p>​——Eason 28&#x2F;04&#x2F;23</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
