<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>像树一样生长</title>
      <link href="/2023/10/28/2023-10-28-%E5%83%8F%E6%A0%91%E4%B8%80%E6%A0%B7%E7%94%9F%E9%95%BF/"/>
      <url>/2023/10/28/2023-10-28-%E5%83%8F%E6%A0%91%E4%B8%80%E6%A0%B7%E7%94%9F%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="像树一样生长"><a href="#像树一样生长" class="headerlink" title="像树一样生长"></a>像树一样生长</h2><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>​   作为一个文学水平巅峰停留在初高中的人来说能想要放下手中的ddl来写一些文字可谓极其稀有了，即便如此，我的确是有些东西和感悟要写，算是记录，算是回忆……</p><h3 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h3><p>​   大学，确实是有些魅力的，它令人着迷的点不仅是你摄入的知识（虽然你科的学生大多数时间都在干这个），还在你接触的人，看到的事。因为贵专业的缘故，其实我并没有接触到什么人，每天做的事也远不如进入大学前幻想的精彩，不过好在，我还是有了些思考。</p><h4 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h4><p>​   首先自然是讲讲学业，不知道其它学校或者华科其它专业的本科生教学水平怎么样，但是口口（华科计院）的教学实在不敢恭维，学的东西有用吗，肯定是有用的，但是内容确实也没有紧跟时代，再加上奇怪的时间安排，一门课学下来最后毕业脑子里剩下的东西并不多。大多数人只是为了保研出国或者奖学金卷一个高分（羡慕会考试的，我想卷高分都不会），毕业了工作是不是计算机方向都不一定，就算是，大多数技能都是自学，即便你保研了，最终目的只要是就业，无非就是多读3-5年书，拿个研究生博士生的学历，让你在大学的 “温床” 多停留3-5年罢了。那如果留校执教呢，不可否认做科研确实是辛苦且伟大的工作，并且学术界不乏认真努力有成果的导师教授，但兼顾教学和科研的教师又有多少呢，不挂名不水论文的人又有多少呢，不接横向的导师又有多少呢。但是不可否认保研，出国还是有很大的吸引力，这也是大多数人（包括我）即便想也不敢置之学业不理的原因。当然了，这样的思考太过于主观，每个人有不同的生活方式和对学业的理解，想好自己怎么走最重要（谁来帮我想想我该怎么走 ）</p><h4 id="世界观-amp-方法论"><a href="#世界观-amp-方法论" class="headerlink" title="世界观 &amp; 方法论"></a>世界观 &amp; 方法论</h4><p>​   再来讲讲方法论和世界观。随着见识的增长，我对世界的构造和运作的感知确实是增长了，但如何看待这个世界，如何在这个社会生存，如何走接下去的人生，怎么把生命在有限的时间过的丰富精彩，我的方法论似乎还停留在初高中，你可以说是学生思维，也可以说是一种固化体系下的茫然感，简单来说，就是读的书太少（害）。 都说成长就是慢慢能看清自己是什么样的人，我也发觉了自己身上的一些特点。有时我挺急的，例如代码一直debug不出来，调不通，我不是沉住气耐下性子思考发现问题，而是开始烦躁，心态炸裂，四处求救，甚至copy别人的，想着之后再研究问题出在哪；有时我不懂得拒绝，总是老好人的角色，或许在互联网上还犀利些，但实际这样活得有点儿累；有时我对待陌生人总是过于的热心，却因为懒放假在家都不愿意多去看望一下家里的老人（好在这个暑假开始多起来了），不珍惜和家庭相处的时光，初中的政治课教了我们 “家是心灵的港湾，是永远的避风港”，但作为家庭的一员，这种关系是相互的，我也得努力，多投入时间，去成为别人的港湾和避风港；有时候我会耗费自己的身体，牺牲一些健康，去达成后来回过头发现无关痛痒的事情，别等到年老了发现为此养了一身病，但我明白有时候当下很难放下（不然就太佛了），希望能减少，身体第一；有时我思考问题太过宏观，常常想生命的尽头，一辈子应该怎么安排，想要走的每一步都正确无瑕，结合上完美主义的坏毛病，直接导致了做事情进入状态慢，效率不高，过于谨慎，如履薄冰，但其实很多事情是得自己经历过才会真正成长，光靠想是想不出结果的，或者就是从书中汲取智慧（读书真的太重要，希望我能挤出时间看看书！）所以不如专注眼前；有的时候我明明懂得很多的这些道理，但就是执行力不够，意志不够坚定，浪费了太多时间。</p><h4 id="本学期目前的总结"><a href="#本学期目前的总结" class="headerlink" title="本学期目前的总结"></a>本学期目前的总结</h4><p>​   这学期经历了很多事，进了联创，了解了一下就业的学长学姐发展方向，每天被新人任务折磨的半死不活；进了鄂港联，认识了好多有意思的小伙伴，也参加了很多活动，最重要的还是锻炼了一些技能；开始采用新的应对考试模式（能不能破釜沉舟成功另说），开始翘一些课（真是不好但听不懂咋办）。前两天看了b站一个关于俞敏洪的视频，主题叫奔流，主要讲述了双减后的新东方和他的一些故事，颇有感触。三十余年的创业生涯，中国的经济如大河奔流，巨浪淘沙，无数时代的弄潮儿乘势而起，绚烂至极，又转瞬即逝，只有极少数的人能始终立于潮头。每个人都有想成功的梦，”somebody has to win, so why not be me”, 但有赢必有输，所以”somebody has to lose, just do your best”。不知从什么时候开始，我变的焦虑，犹豫，不安，功利，害怕失败，但这种感觉让我觉得漂浮在空中，不踏实，不沉稳，明明胜利才是一时的，失败才是主旋律，有时正是那些百折不挠的经理锤炼了一个人，那些一次次的失败塑造了一个人。</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>​   人的一生很长，应该活的像跑马拉松。</p><p>​   人的一生很短，希望能成长为更好的人。</p><p>​   诸君共勉。</p><p>​  2023.10.28 于华中科技大学启明楼联创团队</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>经典算法</title>
      <link href="/2023/05/31/2023-5-31-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"/>
      <url>/2023/05/31/2023-5-31-%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="经典算法"><a href="#经典算法" class="headerlink" title="经典算法"></a>经典算法</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><ul><li><p>直接插入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;len; i++)&#123;</span><br><span class="line"><span class="type">int</span> key = arr[i];<span class="comment">//存入当前元素 </span></span><br><span class="line"><span class="type">int</span> j = i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&gt;=<span class="number">0</span> &amp;&amp; key&lt;arr[j])&#123;<span class="comment">//后面比前面小</span></span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">arr[j+<span class="number">1</span>]=key;<span class="comment">//否则直接插在后面</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>折半插入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BInsertSort</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;=L.length; ++i)&#123;</span><br><span class="line">L.r[<span class="number">0</span>] = L.r[i];<span class="comment">//L.r[i]暂存到L.r[0]</span></span><br><span class="line">low = <span class="number">1</span>; high = i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">m = (high+low) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(L.r[<span class="number">0</span>].key &lt; L.r[m].key) high = m<span class="number">-1</span>;<span class="comment">//低半区</span></span><br><span class="line"><span class="keyword">else</span> low = m+<span class="number">1</span>;<span class="comment">//高半区</span></span><br><span class="line">&#125;<span class="comment">//while</span></span><br><span class="line"><span class="keyword">for</span>(j = i<span class="number">-1</span>; j&gt;=high+<span class="number">1</span>; --j) L.r[j+<span class="number">1</span>] = L.r[j];<span class="comment">//high+1是插入位置</span></span><br><span class="line">L.r[high+<span class="number">1</span>] = L.r[<span class="number">0</span>];</span><br><span class="line">&#125;<span class="comment">//for</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​减少比较次数，但没有减少移动次数</p><ul><li><p>shell排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">shell_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span> &#123;</span><br><span class="line"><span class="type">int</span> gap, i, j;</span><br><span class="line"><span class="keyword">for</span>(gap = len&gt;&gt;<span class="number">1</span>; gap&gt;<span class="number">0</span>; gap &gt;&gt;= <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span>(i=gap; i&lt;len; i++) &#123;</span><br><span class="line">arr[<span class="number">0</span>] = arr[i];<span class="comment">//暂存在arr[0]</span></span><br><span class="line">            <span class="keyword">for</span>(j = i-gap; j&gt;=<span class="number">0</span> &amp;&amp; arr[j]&gt;arr[<span class="number">0</span>]; j -= gap)</span><br><span class="line">            <span class="comment">//i-gap相当于该组上一个元素，j&lt;0则找到插入位置</span></span><br><span class="line">            arr[j+gap] = arr[j];</span><br><span class="line">            arr[j+gap] = arr[<span class="number">0</span>];<span class="comment">//插入</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h3><ul><li><p>冒泡排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">              flag = <span class="number">1</span>;</span><br><span class="line">              <span class="built_in">swap</span>(arr[j], arr[j + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>快排</p><p>算法分析：时间复杂度O($nlogn$)， 其中选中心点是n，快排是$logn$，空间复杂度是O($logn$)，最坏是O(n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span><span class="comment">//分治思想</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i&lt;j)<span class="comment">//分段</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j+<span class="number">1</span>, r);<span class="comment">//左右两段分别递归排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><ul><li><p>简单选择</p><p>算法思想：0–i-1对当前的i都先让min&#x3D;i，遍历i后面的所有值，若找到比i小的那么就更新min，并交换它们两个</p><p>分析：需要进行的比较次数与初始状态下待排序的记录序列的排列情况无关，都是(n-1)n&#x2F;2次，需要移动记录的次数最多为3(n-1)次</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selection_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;len<span class="number">-1</span>; i++)&#123;</span><br><span class="line"><span class="type">int</span> min = i;</span><br><span class="line"><span class="keyword">for</span>(j = i+<span class="number">1</span>; j&lt;len; j++)<span class="comment">//走访未排序的元素</span></span><br><span class="line"><span class="keyword">if</span>(arr[j] &lt; arr[min]) min = j;</span><br><span class="line"><span class="built_in">swap</span>(arr[j], arr[min]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>堆排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以大根堆为例</span></span><br><span class="line"><span class="comment">//筛选</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapAdjust</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> s, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">cur = arr[s];</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">2</span>*s; j&lt;m; j*=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(j &lt; m &amp;&amp; arr[j]&lt;arr[j+<span class="number">1</span>]) ++j;<span class="comment">//if语句成立说明右子树比左子树大，j为较大的数</span></span><br><span class="line"><span class="keyword">if</span>(cur &gt;= arr[j])<span class="keyword">break</span>;<span class="comment">//已经根最大</span></span><br><span class="line">arr[s] = arr[j]; s = j; <span class="comment">//交换</span></span><br><span class="line">&#125;</span><br><span class="line">arr[s] = cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapSort</span> <span class="params">(<span class="type">int</span> arr[])</span> </span>&#123;</span><br><span class="line"><span class="comment">//建堆</span></span><br><span class="line"><span class="keyword">for</span>(i = len/<span class="number">2</span>; i&gt;<span class="number">0</span>; --i)<span class="comment">//从最后一个非叶子结点开始</span></span><br><span class="line"><span class="built_in">HeapAdjust</span>(arr, i, len);</span><br><span class="line"><span class="keyword">for</span>(i = len; i&gt;<span class="number">1</span>; --i)&#123;</span><br><span class="line"><span class="built_in">swap</span>(arr[<span class="number">1</span>], arr[i]);<span class="comment">//最后一个叶子和根交换--&gt;放后面排序</span></span><br><span class="line"><span class="built_in">HeapAdjust</span>(arr, <span class="number">1</span>, len<span class="number">-1</span>);<span class="comment">//重新调整为大顶堆</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid);<span class="comment">//左右两边递归排序</span></span><br><span class="line">    <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;<span class="comment">//k为tmp数组中的索引</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<span class="comment">//两边都还没到头</span></span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j]) tmp[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++] = q[j++];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i&lt;=mid) tmp[k++] = q[i++];<span class="comment">//把剩余没比较的直接复制</span></span><br><span class="line">    <span class="keyword">while</span> (j&lt;=r) tmp[k++] = q[j++];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=l, j=<span class="number">0</span>; i&lt;=r; i++, j++) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>实用于多个关键字情况 O(n)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>logistics</title>
      <link href="/2023/05/04/2023-5-4-logistics/"/>
      <url>/2023/05/04/2023-5-4-logistics/</url>
      
        <content type="html"><![CDATA[<h2 id="x3D-x3D-二元分类-x3D-x3D"><a href="#x3D-x3D-二元分类-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;二元分类&#x3D;&#x3D;"></a>&#x3D;&#x3D;二元分类&#x3D;&#x3D;</h2><p>输出：标签1&#x2F;0</p><p>img在计算机中保存–&gt;三个矩阵（假设64*64，那么就有3 * 64 * 64个像素，变成特征向量，总维度，也就是矩阵的行为n&#x3D;3 * 64 * 64，如果有m组训练集，那么矩阵最终为m列，n行)</p><p><img src="/../img/%E4%B8%89%E4%B8%AA%E7%9F%A9%E9%98%B5.png" alt="三个矩阵"></p><h2 id="x3D-x3D-logistics回归-x3D-x3D"><a href="#x3D-x3D-logistics回归-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;logistics回归&#x3D;&#x3D;"></a>&#x3D;&#x3D;logistics回归&#x3D;&#x3D;</h2><p> y^ 表示 y 等于1的一种可能性或者是机会</p><p>w 表示逻辑回归的参数，这也是一个 n 维向量（因为 w 实际上是特征权重，维度与特征向量相同），参数里面还有 b，这是一个实数（表示偏差）</p><p>选择使用sigmoid函数原因：如果单纯线性，无法把y^值控制在0-1之间，故取sigmoid(z)</p><p>使得z很大，sigmoid(z)趋近1， z 变成一个绝对值很大的负数，sigmoid(z)趋近0</p><p><img src="/../img/sigmoid.png" alt="sigmoid"></p><h3 id="x3D-x3D-损失函数-x3D-x3D"><a href="#x3D-x3D-损失函数-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;损失函数&#x3D;&#x3D;"></a>&#x3D;&#x3D;损失函数&#x3D;&#x3D;</h3><p>$L(\hat{y},y) &#x3D; -y\log(\hat{y})-(1-y)\log(1-\hat{y})$    单次</p><p>成本（代价）函数：$J(w,b) &#x3D; \frac{1}{m}\sum_{i&#x3D;1}^{m}{(-y\log(\hat{y})-(1-y)\log(1-\hat{y}))}$ 也就是总代价，训练逻辑回归模型时候，我们需要找到合适的 w 和 b ，来让代价函数 J 的总代价降到最低</p><h2 id="x3D-x3D-梯度下降法-x3D-x3D"><a href="#x3D-x3D-梯度下降法-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;梯度下降法&#x3D;&#x3D;"></a>&#x3D;&#x3D;梯度下降法&#x3D;&#x3D;</h2><p>J 为凸函数，没有局部最优，只有全局最优</p><p><img src="/../img/bowl.png" alt="bowl"></p><p><strong>朝最陡的下坡方向走一步，不断地迭代</strong></p><p>更新w，b  找到最合适的参数使得J &#x3D; Jmin<br><img src="/../img/repeat%20procedure.png" alt="Alt text"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Intro to deep learning</title>
      <link href="/2023/05/03/2023-5-3-intro%20to%20Deep%20learning/"/>
      <url>/2023/05/03/2023-5-3-intro%20to%20Deep%20learning/</url>
      
        <content type="html"><![CDATA[<h2 id="x3D-x3D-Deep-learning-x3D-x3D"><a href="#x3D-x3D-Deep-learning-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;Deep learning&#x3D;&#x3D;"></a>&#x3D;&#x3D;Deep learning&#x3D;&#x3D;</h2><h3 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h3><p>RELU 修正线性单元</p><p>独立神经元叠在一起 –&gt; 神经网络 –&gt; 只需要input x –&gt; output y（中间部分自己完成）</p><p><img src="/../img/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.png" alt="image-20230503192115327"></p><p>supervised learning 监督学习       &#x3D;&#x3D;NN-&gt;neural net&#x3D;&#x3D;</p><ul><li><p>predict房价，ad投放   –&gt;  standard NN;</p></li><li><p>image  –&gt; CNN（卷积神经网络）</p></li><li><p>sequence data&#x3D;&#x3D;(eg. audio, language)&#x3D;&#x3D;  –&gt;  RNN （循环神经网络）</p></li><li><p>无人驾驶 –&gt; custom, hybrid(复杂)</p></li></ul><p> 结构化数据——对数据有很清晰的定义</p><p>非结构化数据——相对难解释给计算机</p><p><img src="/../img/%E7%BB%93%E6%9E%84&%E9%9D%9E%E7%BB%93%E6%9E%84.png" alt="image-20230503192013798"></p><p>要么神经网络规模大，要么数据量多</p><ul><li>data 早期</li><li>computation 当下 </li><li>algorithms 创新算法为了加快计算速度，服务于规模更大的网络</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kadane算法-动态规划</title>
      <link href="/2023/04/28/2023-4-28-Kadane%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2023/04/28/2023-4-28-Kadane%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>Kadane算法-&gt;动态规划</p><p>最大连续子数组和：函数名称是MaxSubArray(L); 初始条件是线性表L已存在且非空，请找出一个具有最大和的连续子数组（子数组最少包含一个元素），操作结果是其最大和；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> maxSum = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> curSum = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; numsSize; i++) &#123;</span><br><span class="line">        curSum = curSum &gt; <span class="number">0</span> ? curSum + nums[i] : nums[i];</span><br><span class="line">        <span class="keyword">if</span> (curSum &gt; maxSum) &#123;</span><br><span class="line">            maxSum = curSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链表类似</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>快排 &amp; 归并</title>
      <link href="/2023/04/28/2023-4-28-%E5%BF%AB%E6%8E%92&amp;%E5%BD%92%E5%B9%B6/"/>
      <url>/2023/04/28/2023-4-28-%E5%BF%AB%E6%8E%92&amp;%E5%BD%92%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="快速排序-gt-平均O-nlogn-gt-不稳定"><a href="#快速排序-gt-平均O-nlogn-gt-不稳定" class="headerlink" title="快速排序-&gt;平均O(nlogn)-&gt;不稳定"></a>快速排序-&gt;平均O(nlogn)-&gt;不稳定</h3><h4 id="x3D-x3D-基本思想-x3D-x3D"><a href="#x3D-x3D-基本思想-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;基本思想&#x3D;&#x3D;"></a>&#x3D;&#x3D;基本思想&#x3D;&#x3D;</h4><h5 id=""><a href="#" class="headerlink" title=""></a><img src="/../img/%E5%BF%AB%E6%8E%92.png" alt="快排"></h5><h5 id="分治——以上是暴力做法-复杂度为O-n"><a href="#分治——以上是暴力做法-复杂度为O-n" class="headerlink" title="分治——以上是暴力做法 复杂度为O(n)"></a>分治——以上是暴力做法 复杂度为O(n)</h5><h5 id="优美解法如上"><a href="#优美解法如上" class="headerlink" title="优美解法如上"></a><img src="/../img/%E5%BF%AB%E6%8E%92%E6%9A%B4%E5%8A%9B.png" alt="快排暴力">优美解法如上</h5><h4 id="归并排序-gt-O-nlogn-gt-稳定"><a href="#归并排序-gt-O-nlogn-gt-稳定" class="headerlink" title="归并排序-&gt;O(nlogn)-&gt;稳定"></a>归并排序-&gt;O(nlogn)-&gt;稳定</h4><p>&#x3D;&#x3D;基本思想&#x3D;&#x3D;——难点在归并<br><img src="/../img/%E5%BD%92%E5%B9%B6.png" alt="归并"><br>关于复杂度：n除2^logn次得到1，也就是有logn层，每一层的复杂度为n，故总复杂度为nlogn</p><p><img src="/../img/%E5%BD%92%E5%B9%B6%E6%80%9D%E8%B7%AF.png" alt="归并思路"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端路径</title>
      <link href="/2023/04/28/2023-4-28-%E5%89%8D%E7%AB%AF%E8%B7%AF%E5%BE%84/"/>
      <url>/2023/04/28/2023-4-28-%E5%89%8D%E7%AB%AF%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="前端路径"><a href="#前端路径" class="headerlink" title="前端路径"></a>前端路径</h1><h3 id="三大件"><a href="#三大件" class="headerlink" title="三大件"></a>三大件</h3><ul><li><h4 id="html5，css"><a href="#html5，css" class="headerlink" title="html5，css"></a>html5，css</h4></li></ul><p>  ​这里推荐pink老师的前端入门教程：</p><p>  ​<a href="https://www.bilibili.com/video/BV14J4114768">https://www.bilibili.com/video/BV14J4114768</a></p><p>  ​可以先看到249集</p><ul><li><h4 id="JS、BOM、DOM"><a href="#JS、BOM、DOM" class="headerlink" title="JS、BOM、DOM"></a>JS、BOM、DOM</h4><p>黑马程序员pink老师JavaScript基础语法：</p><p><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha">https://www.bilibili.com/video/BV1Sy4y1C7ha</a></p><p>可以先看到286集</p></li></ul><h3 id="学习平台"><a href="#学习平台" class="headerlink" title="学习平台"></a>学习平台</h3><p>  W3School：<a href="https://www.w3school.com.cn/">https://www.w3school.com.cn/</a></p><p>  MMDN：<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><p>  菜鸟教程：<a href="https://www.runoob.com/">https://www.runoob.com/</a></p><p>  当然还有：</p><p>  谷歌：<a href="https://www.google.com.hk/">https://www.google.com.hk/</a></p><h3 id="协同工具"><a href="#协同工具" class="headerlink" title="协同工具"></a>协同工具</h3><p>  ​git：</p><p>  ​<a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p><p>  ​github：</p><p>  ​<a href="https://github.com/">https://github.com/</a></p><p>  可以自己找一些项目做，主要多敲代码</p><p>  之后进阶可以学习react，vue框架</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/04/27/2023-4-27-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/04/27/2023-4-27-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2><p>yeah yeah yeah </p><p>要开始做博客了，大一上学期学姐就有推荐我尝试记录自己的成长历程</p><p>但无奈那时候太忙orz（懒是原罪）</p><p>这学期看了大物实验的blog觉得很帅</p><p>想自己尝试一下</p><p>希望先做个小demo出来</p><p>后续会不断完善滴！！！</p><p>​——Eason 28&#x2F;04&#x2F;23</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
